/* ------------------------------------------------
 * main.cpp
 *
 * Class: Program #3 for CS 141, Fall 2019
 * System: Codio
 * Author: Kevin Elliott, Andy Hansana
 *
*/
#include <iostream>
#include <string>
#include <fstream>      // For file input
#include <vector>		// For dictionary vector
#include <iomanip>		// For setw()
#include <cctype>       // For tolower()
using namespace std;


//---------------------------------------------------------------
// Display ID info 
//
void displayIdInfo()
{
    cout << " \n"
         << "Program #3: Work Play  \n"
         << "Author: Dale Reed      \n"
         << "Lab: Tues 8am          \n"
         << "System:  Codio         \n"
         << " \n";
}//end displayIDInfo()
//-----------------------------------------------------------------------------------------
//  You should use parameters for the dictionary, the word lengths array, 
//  the length of words to use, and the total number of words.
void readInWordsFromFile(int lengthOfWordsToUse, vector<string> &dictionary)
{
	ifstream inputFileStream;
    
    int firstIndex = 0;
    int secondIndex = 0;
    
    cout << "Enter the start and end index values of words to display:" ;
    cin >> firstIndex;
    cin >> secondIndex;
    cout << endl << "About to display dictionary words from " << firstIndex << " to " << secondIndex << endl; 

    int startIndex = 0;
    
    for(int i = firstIndex; i <= secondIndex; i++){
        cout << setw(5) << i << " " << dictionary[i] << endl;
    }
    
    cout << endl;
    }

//--------------------------------------------------------------------------------------
// Use binary search to look up the search word in the dictionary vector, returning
// the word's index if found, -1 otherwise.
//
long binarySearch(
            string searchWord,            // word to be looked up
            vector< string> dictionary)   // the dictionary of words
{
    long low, mid, high;     // array indices for binary search
    long searchResult = -1;  // Stores index of word if search succeeded, else -1
    
    // Binary search for word
    low = 0;
    high = dictionary.size() - 1;
    while ( low <= high)  {
        mid = (low + high) / 2;
        // SearchResult negative value means word is to the left, positive value means
        // word is to the right, value of 0 means word was found
        searchResult = searchWord.compare( dictionary[ mid] );
        if ( searchResult == 0)  {
            // Word IS in dictionary, so return the index where the word was found
            return mid;
        }
        else if (searchResult < 0)  {
            high = mid - 1; // word should be located before the mid location
        }
        else  {
            low = mid + 1; // word should be located after the mid location
        }
    }
    
    // Word was not found
    return -1;
}//end binarySearch()

void dictChecker(int lengthOfWordsToUse, vector<string> &dictionary, int numOfWords[], int &totalWords)
{
	ifstream inputFileStream;
	dictionary.clear();
	
    for(int i = 0; i < 30; i++){
        numOfWords[i] = 0;
    }
    string fileName = "dictionary.txt"; // C string (array of char) to store filename
    string inputWord;				    // stores each word as it is read

	// Open input file
	inputFileStream.open( fileName.c_str() );
	    
   // Verify that the open worked
    if( !inputFileStream.is_open()) {        
        cout << "Could not find input file " << fileName << "  Exiting..." << endl;
        exit( -1);
    }

	// Read all the words from the file, and display them
     while( inputFileStream >> inputWord) {
    	 if (inputWord.length() == lengthOfWordsToUse){
            for(int i = 0; i < inputWord.length(); i++){
                inputWord[i] = tolower(inputWord[i]);
            }
             dictionary.push_back(inputWord);
        }
        numOfWords[inputWord.length()]++; 
    }
    
    inputFileStream.close();    // Close the input file.
}
void printNumOfWordsTable(int numOfWords[]){
    
    cout << "Word lengths where there are more than 1400 words:" << endl;
    cout << "Length  How Many" << endl;
    cout << "------  --------" << endl;
    for (int i = 0; i < 30; i++){
        if(numOfWords[i] >= 1400){
        cout << setw(5) << i << setw(10) <<  numOfWords[i] << endl;
         }
    }
    cout << endl;
}

void caseThree(vector<string> dictionary, string &startWord, string &endWord, int numberOfWords[], int lengthOfWordsToUse){
    startWord = "dog";
    endWord = "cat"; 
    int doLoopInt = 0;
    
    do{
        cout << "Enter starting word, or 'r' for a random word: " << endl;
   
        cin >> startWord; 
        cout << endl;
        
        
        if (startWord == "exit")
         {
        cout <<"Exiting program." << endl;
        exit(-1);
         }
        if (startWord == "r" ){
        startWord = dictionary[rand()%dictionary.size()];
        //end condition
        }
        else if(startWord.length() != lengthOfWordsToUse){
            cout<<"*** '"<< startWord <<"' is not of length 3. Please retry."<<endl;
            continue;
        }
        
        else if(binarySearch(startWord, dictionary) == -1){
            cout<<"*** '"<< startWord <<"' is not in the dictionary. Please retry."<<endl;//error
            continue;
        }
   
        doLoopInt = 1;
           
    }
    while (doLoopInt == 0); 
    do{
        cout << "Enter ending word, or 'r' for a random word: " ; 
   
        cin >> endWord; 
        
        if (startWord == "exit")
        {
            exit(-1);
        }
       
     if (endWord == "r" ){
        endWord = dictionary[rand()%dictionary.size()];
     }
        
         else if(endWord.length() != lengthOfWordsToUse){
            cout<<"*** '" << endWord << "' is not of length 3. Please retry."<< endl <<endl;
            continue;            
            
        }
        else if(binarySearch(endWord, dictionary) == -1){
            cout<<"*** '"<< endWord <<"' is not in the dictionary. Please retry."<< endl <<endl; //error
            continue;
        }
        doLoopInt = 1;
          
    }
    while (doLoopInt == 0); 
   
}

void wordChangeGame(int lengthOfWordsToUse, string startWord, string endWord,vector<string>dictionary)
{
    string previousWord = startWord;
    string nextWord = "";
    string currentWord = "";
    int counter = 0;
    int letterCounter = 0;
    int x = 0;
   
      if (startWord ==" " && endWord== " "){
        cout<<"    *** "<< startWord <<" is not of length 3. Please retry."<<endl;
      }
       
       do{
           counter++;
           cout <<" "<< counter <<  ". Previous word is '" << previousWord << "'.  Next word: " << endl;
           cin >> nextWord;
           
           for(int i= 0; i<lengthOfWordsToUse; i++){
               
           }
        
           if(nextWord == "exit"){
               break;
           } 
           //forLoop
           letterCounter = 0;
           for(int i = 0; i < lengthOfWordsToUse; i++){
               if(nextWord.at(i) == previousWord.at(i)){
                   letterCounter++;
               }
               
           }
           
           if (nextWord.length() != lengthOfWordsToUse){
               counter--;
               cout << "    *** " << "'" << nextWord << "'" << " is not of length " <<lengthOfWordsToUse <<  ". Please retry." << endl;
               continue;
           }
           
           else if(letterCounter != lengthOfWordsToUse - 1){
               counter--;
               cout << "    *** " << "'" << nextWord << "'" << " must be exactly 1 character different.  Please retry." << endl;
               continue;
           }
           
            if(binarySearch(nextWord, dictionary) != -1){
               previousWord = nextWord;
               
            }
                         
           else if(binarySearch(nextWord, dictionary) == -1){
            counter--;
            cout<<"    *** '" << nextWord << "' is not in the dictionary. Please retry."<<endl; //error
            continue;
            }
           // add second error for length
           if(previousWord != endWord){
               continue;
           }
           else if(previousWord == endWord){
               x = 1;
               cout <<"Congratulations, you did it!" <<endl;
               break;
           }
       
       }while(x == 0);
      
    }

int getChildIndex(string child, vector <string> tempVector){
  
    for(int x = 0; x < tempVector.size(); x++){
        if(child == tempVector.at(x)){
            return x;
        }       
    }
   
}

void case7(string endWord, string startWord, string origWord, vector <string> tempVector, vector <string> parentVector, vector <int> parentIndex){ // child word, startWord, endWord, parent?, tempVector. parentVector
  
    string child = endWord;
    string parent;
    int z = tempVector.size()-1;
    cout << setw(5) << z << ". " << child << endl;
    while(child != origWord){
        for(int i = tempVector.size(); i > 0; i--){
            int x = getChildIndex(child, tempVector);
            
            parent = parentVector.at(x-1); // cog
            
            cout << setw(5) << parentIndex.at(x-1) << ". " << parent << endl;
            child = parent;
            if(child == origWord){
                break;
            }
        }
    }
    
}

void case5(vector<string>dictionary, string startWord, string endWord, int lengthOfWordsToUse, int caseNumber, vector<int> &winningSequence, bool case7bool){
    string origWord = startWord;
    vector <string> parentVector;
    vector <int> parentIndex;
    string parentWord5;
      
    int parentCounter = 0;
    int childCounter = 0;
    int sub = 0; // do string.at(x) = string.at(x) 97+ sub... ascii table plus sub equals the letter
    
    vector <string> tempVector;
    tempVector.push_back(startWord);
    
    vector <int> bucket(dictionary.size());

    for(int i = 0; i < tempVector.size(); i++){
        
        if(startWord == endWord){
             break;
            }
        //origWord == startWord;
        if(caseNumber == 5) {cout << parentCounter << ". " << tempVector.at(i) << ":  ";}
        for(int p = 0; p < lengthOfWordsToUse; p++){  //resets the word everytime, changes the number of letter from the first letter to the second   
            
            startWord = tempVector.at(i);
            
            //tempVector.push_back(startWord);
            for(int sub = 0; sub <= 25; sub++){   //changes the letter to every of the alphabet, needs to add to a vector
                
                startWord[p] = (char)(97 + sub);      //changes letter
                long locationOfWord = binarySearch(startWord, dictionary);
                if(origWord == startWord){bucket.at(locationOfWord) = 1;}   //check if the changed word is equal to origWord
                            
                  if((locationOfWord != -1) && (bucket.at(locationOfWord) == 0) && ((locationOfWord != 0) || (dictionary.at(locationOfWord - 1) != dictionary.at(locationOfWord)))){// cant binary search temp vector  && (binarySearch(startWord, tempVector) == -1)                 
                                                                                                               
                        bucket.at(locationOfWord) = 1;
                        tempVector.push_back(startWord);            // if both true, add startWord to tempVector
                        parentVector.push_back(tempVector[i]); // tempvector[]i
                        parentIndex.push_back(parentCounter);
                        //cout << " in case 5 push back test " << startWord << "<- startword " << tempVector[i] << "tempvector[i] " << endl;
                      
                        childCounter++;
                        if(caseNumber == 5) {cout << " " << childCounter << ":" << startWord;}                       
                      }
            
                        if(startWord == endWord){    //once cat is reached, break cycle, might be not needed
                            break;
                        }
                        
        }//end 3rd for loop
            if(startWord == endWord){    //once cat is reached, break cycle, might be not needed
                            break;
                        }
        }
        parentCounter++;
        if(caseNumber == 5) {cout << endl;}
    }
   
    if (caseNumber == 5 || caseNumber == 6){cout << endl << "Winning sequence was found!" << endl << endl;}
    
   
    if (case7bool == true){case7(endWord, startWord, origWord, tempVector, parentVector, parentIndex);}
   
}

//-----------------------------------------------------------------------------------------
int main()
{
    vector< string> dictionary;    		// Vector of dictionary words read in from file
    int lengthOfWordsToUse = 3;         // Default length of word to use in word transformation
    string startWord = "dog";           // The start word for transformation
    string endWord = "cat";             // The end word for transformation
    int menuOption = -1;                // User menu option selection
    int totalWords = 0;
    int caseNumber;
    int numOfWords[30] = {0};
    dictionary.clear();
    bool case7bool = false;
    vector <int> winningSequence;
    int startIndex = 0;
    int endIndex = 0; // array of size 30, each index is the number of words, index 0 is word length 1
    int startingWord = 0;
    dictChecker(lengthOfWordsToUse, dictionary, numOfWords, totalWords);
    
    // Display ID info
    displayIdInfo();
    
    cout << "Total number of words in dictionary file: 235886" << endl << endl;
    
    printNumOfWordsTable(numOfWords);

    // Seed the random number generator
    srand( 1);  // Change 1 to time(0) for non-predictable results, but leave as 1 for testing

    // Menu display and handling infinite loop
    do {
 
        cout << "Currently we have " << dictionary.size() << " words of length "
             << lengthOfWordsToUse << " in the dictionary.  \n"
             << "Changing from '" <<startWord << "' to '" << endWord<< "'" << endl
             << endl;
        
        cout << "Choose from the following options:  \n"
             << "   1. Change the word length        \n"
             << "   2. Display some dictionary words \n"
             << "   3. Get start and end words       \n"
             << "   4. Play the word change game     \n"
             << "   5. Find the end word with debug  \n"
             << "   6. Find the end word             \n"
             << "   7. Display an answer sequence    \n"
             << "   8. Exit the program              \n"
             << "Your choice -> " << endl << endl;
           
        
       cin >> menuOption;
               
        switch(menuOption){
            case 1:
                
                cout << "What length words do you want to use? ";
                cin >> lengthOfWordsToUse;
                dictChecker(lengthOfWordsToUse, dictionary, numOfWords, totalWords);   //we have numOfWords[] getting filled but we have not printed it yet               
                startWord = "";
                endWord = "";            
                
                break;
                
            case 2:
                readInWordsFromFile(lengthOfWordsToUse, dictionary);
                break;
                
            case 3:
                caseThree(dictionary,startWord,endWord,numOfWords,lengthOfWordsToUse);
                break;
            case 4:
                //wordChangeGame(dictionary,startWord,endWord);
                wordChangeGame(lengthOfWordsToUse, startWord, endWord, dictionary);
                break;
                
            case 5:
                //cout << "Find the end word with debug " << endl;
                caseNumber = 5;
                case5(dictionary, startWord, endWord, lengthOfWordsToUse, caseNumber, winningSequence, case7bool);
                break;
                
            case 6:
                caseNumber = 6;
                case5(dictionary, startWord, endWord, lengthOfWordsToUse, caseNumber, winningSequence, case7bool);
                break;
                
            case 7:
                case7bool = true;
                caseNumber = 7;
                cout << "Winning sequence in reverse order is:" << endl;
                case5(dictionary, startWord, endWord, lengthOfWordsToUse, caseNumber, winningSequence, case7bool);
                break;
                
            case 8:
                cout << endl << endl << "Exiting the program";
                exit(-1);
                break;
        }
        
    } while( true);
	
    return 0;
}//end main()
//test
