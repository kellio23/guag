/* ------------------------------------------------
 * main.cpp
 *
 * Class: Program #3 for CS 141, Fall 2019
 * System: Codio
 * Author: Kevin Elliott, Andy Hansana
 *
*/
#include <iostream>
#include <string>
#include <fstream>      // For file input
#include <vector>		// For dictionary vector
#include <iomanip>		// For setw()
#include <cctype>       // For tolower()
using namespace std;


//---------------------------------------------------------------
// Display ID info 
//
void displayIdInfo()
{
    cout << " \n"
         << "Program #3: Work Play  \n"
         << "Author: Dale Reed      \n"
         << "Lab: Tues 8am          \n"
         << "System:  Codio         \n"
         << " \n";
}//end displayIDInfo()


//-----------------------------------------------------------------------------------------
//  You should use parameters for the dictionary, the word lengths array, 
//  the length of words to use, and the total number of words.
void readInWordsFromFile(int lengthOfWordsToUse, vector<string> &dictionary)
{
	ifstream inputFileStream;
    
    int firstIndex = 0;
    int secondIndex = 0;
    
    cout << "What length of words do you want to use?" ;
    cin >> firstIndex;
    cin >> secondIndex;
    
    int startIndex = 0;
    
    for(int i = firstIndex; i <= secondIndex; i++){
        cout << setw(5) << i << " " << dictionary[i] << endl;
    }
    cout << endl;
    }


/*    string fileName = "dictionary.txt"; // C string (array of char) to store filename
    string inputWord;				    // stores each word as it is read

	// Open input file
	inputFileStream.open( fileName.c_str() );
	    
   // Verify that the open worked
    if( !inputFileStream.is_open()) {
        cout << "Could not find input file " << fileName << "  Exiting..." << endl;
        exit( -1);
    }

	// Read all the words from the file, and display them
    while( inputFileStream >> inputWord) {
    	 if (inputWord.length() == lengthOfWordsToUse){
            for(int i = 0; i < inputWord.length(); i++){
                inputWord[i] = tolower(inputWord[i]);
            }
             dictionary.push_back(inputWord);
        }
        numOfWords[inputWord.length()]++; 
    }

    inputFileStream.close();    // Close the input file.
}
*/
//--------------------------------------------------------------------------------------
// Use binary search to look up the search word in the dictionary vector, returning
// the word's index if found, -1 otherwise.
//
long binarySearch(
            string searchWord,            // word to be looked up
            vector< string> dictionary)   // the dictionary of words
{
    long low, mid, high;     // array indices for binary search
    long searchResult = -1;  // Stores index of word if search succeeded, else -1
    
    // Binary search for word
    low = 0;
    high = dictionary.size() - 1;
    while ( low <= high)  {
        mid = (low + high) / 2;
        // SearchResult negative value means word is to the left, positive value means
        // word is to the right, value of 0 means word was found
        searchResult = searchWord.compare( dictionary[ mid] );
        if ( searchResult == 0)  {
            // Word IS in dictionary, so return the index where the word was found
            return mid;
        }
        else if (searchResult < 0)  {
            high = mid - 1; // word should be located before the mid location
        }
        else  {
            low = mid + 1; // word should be located after the mid location
        }
    }
    
    // Word was not found
    return -1;
}//end binarySearch()

void dictChecker(int lengthOfWordsToUse, vector<string> &dictionary, int numOfWords[], int &totalWords)
{
	ifstream inputFileStream;
	dictionary.clear();
	
    for(int i = 0; i < 30; i++){
        numOfWords[i] = 0;
    }
    string fileName = "dictionary.txt"; // C string (array of char) to store filename
    string inputWord;				    // stores each word as it is read

	// Open input file
	inputFileStream.open( fileName.c_str() );
	    
   // Verify that the open worked
    if( !inputFileStream.is_open()) {        
        cout << "Could not find input file " << fileName << "  Exiting..." << endl;
        exit( -1);
    }

	// Read all the words from the file, and display them
     while( inputFileStream >> inputWord) {
    	 if (inputWord.length() == lengthOfWordsToUse){
            for(int i = 0; i < inputWord.length(); i++){
                inputWord[i] = tolower(inputWord[i]);
            }
             dictionary.push_back(inputWord);
        }
        numOfWords[inputWord.length()]++; 
    }

    inputFileStream.close();    // Close the input file.
}
void printNumOfWordsTable(int numOfWords[]){
    
    cout << "Word lengths where there are more than 1400 words:" << endl;
    cout << "Length  How Many" << endl;
    cout << "------  --------" << endl;
    for (int i = 3; i < 18; i++){
        cout << i << "  " << numOfWords[i] << endl;
    }
    
}

void caseThree(vector<string> dictionary, string &startWord, string &endWord, int numberOfWords[]){
    startWord = "dog";
    endWord = "cat"; 
    do{
        cout << "Enter starting word, or 'r' for a random word: " ; 
   
        cin >> startWord;
        if (startWord = 'exit'){
        exit(-1);
    }
    if (startWord = 'r' ){
        startWord = dictionary[rand()%dictionary.size()];
        //end condition
    }
    
    
    
    if (startWord.length() != 3){
        
        
    }

    
        
        
        
        
    }
    while (   ); 
   
    }

    
    
    
    
    
}
    
    
    
    
        
    





//-----------------------------------------------------------------------------------------
int main()
{
    vector< string> dictionary;    		// Vector of dictionary words read in from file
    int lengthOfWordsToUse = 3;         // Default length of word to use in word transformation
    string startWord = "dog";           // The start word for transformation
    string endWord = "cat";             // The end word for transformation
    int menuOption = -1;                // User menu option selection
    int totalWords = 0;
    int numOfWords[30] = {0};
    dictionary.clear();
    int startIndex = 0;
    int endIndex = 0; // array of size 30, each index is the number of words, index 0 is word length 1
    int startingWord = 0;
    dictChecker(lengthOfWordsToUse, dictionary, numOfWords, totalWords);
    
    printNumOfWordsTable(numOfWords);

    //readInWordsFromFile(lengthOfWordsToUse, dictionary);

    // Display ID info
    displayIdInfo();
    
    
    
    // Seed the random number generator
    srand( 1);  // Change 1 to time(0) for non-predictable results, but leave as 1 for testing

    // Menu display and handling infinite loop
    do {
      /* cout <<"Word lengths where there are more than 1400 words:
Length  How Many
------  --------
    3      1420
    4      5272
    5     10230
    6     17706
    7     23869
    8     29989
    9     32403
   10     30878
   11     26013
   12     20462
   13     14939
   14      9765
   15      5925
   16      3377
   17      1813*/
        
        
        
        cout << "Currently we have " << dictionary.size() << " words of length "
             << lengthOfWordsToUse << " in the dictionary.  \n"
             << "Changing from '" << startWord << "' to '" << endWord << "'" << endl
             << endl;
        
        cout << "Choose from the following options:  \n"
             << "   1. Change the word length        \n"
             << "   2. Display some dictionary words \n"
             << "   3. Get start and end words       \n"
             << "   4. Play the word change game     \n"
             << "   5. Find the end word with debug  \n"
             << "   6. Find the end word             \n"
             << "   7. Display an answer sequence    \n"
             << "   8. Exit the program              \n"
             << "Your choice -> ";
       cin >> menuOption;
        
        
        switch(menuOption){
            case 1:
                cout << "What length of words do you want to use? " << endl;
		cin >> lengthOfWordsToUse;
		dictChecker(lengthOfWordsToUse, dictionary, numOfWords, totalWords);  //we have numOfWords[] getting filled but we have not printed it yet
                break;
                
            case 2:
                
               readInWordsFromFile(lengthOfWordsToUse, dictionary);
             
                break;
                
            case 3:

                
                
                break;
            case 4:
                
                cout << "Play the word change game " << endl;
                break;
                
            case 5:
                cout << "Find the end word with debug " << endl;
                break;
                
            case 6:
                cout << "Find the end word " << endl;
                break;
                
            case 7:
                cout << "Display an answer sequence " << endl;
                break;
                
            case 8:
                exit(-1);
                break;
        }
        
    } while( true);
	
    return 0;
}//end main()
//test
